#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --weight=1

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
db_name=$(ynh_app_setting_get --app=$app --key=db_name)
db_user=$db_name
db_pwd=$(ynh_app_setting_get --app=$app --key=psqlpwd)
phpversion=$(ynh_app_setting_get --app=$app --key=phpversion)
timezone="$(cat /etc/timezone)"

#=================================================
# CHECK VERSION
#=================================================

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --weight=1

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# Restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --weight=2

# If db_name doesn't exist, create it
if [ -z "$db_name" ]; then
	db_name=$(ynh_sanitize_dbid "$app")
	ynh_app_setting_set --app=$app --key=db_name --value=$db_name
fi

# If db_name doesn't exist, create it
if [ -z "$db_pwd" ]; then
	db_pwd=$(ynh_app_setting_get --app=$app --key=psqlpwd)
	ynh_app_setting_set --app=$app --key=psqlpwd --value=$db_pwd
fi

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path="/var/www/$app"
	ynh_app_setting_set --app=$app --key=final_path --value=$final_path
fi

# Cleaning legacy permissions
if ynh_legacy_permissions_exists; then
	ynh_legacy_permissions_delete_all

	ynh_app_setting_delete --app=$app --key=is_public
fi

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..." --weight=1

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app --home_dir="$final_path"

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	# Download, check integrity, uncompress and patch the source from app.src
	mv "$final_path" "$final_path.old"

	ynh_setup_source "$final_path"
	#ynh_secure_remove "$final_path"/tests

	# when running automatic tests, there is no config.inc.php
	if [ -e "$final_path.old/galette/config/config.inc.php" ]; then
	    cp "$final_path.old/galette/config/config.inc.php" "$final_path/galette/config/config.inc.php"
	    cp -r "$final_path.old/galette/data" "$final_path/galette/data"
	fi

	# delete temp directory
	ynh_secure_remove "$final_path.old"
fi

chmod 750 $final_path
chmod -R o-rwx $final_path
chown -R $app:www-data $final_path

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..." --weight=2

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..." --weight=1

ynh_install_app_dependencies $pkg_dependencies

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading PHP-FPM configuration..." --weight=2

# Create a dedicated PHP-FPM config
ynh_add_fpm_config --package="$extra_php_dependencies"

#=================================================
# SPECIFIC UPGRADE
#=================================================
# SETUP LOGROTATE
#=================================================

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --non-append

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

chown "$app" "$final_path/galette/config"
chmod 750 "$final_path/galette/config"

for folder in attachments cache exports files imports logs photos templates_c tempimages
do
    chown "$app" "$final_path/galette/data/$folder"
    chmod 775 "$final_path/galette/data/$folder"
done

#=================================================
# GENERIC FINALIZATION
#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..." --weight=2

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
